from typing import List, Callable, Dict, Any, Optional
import asyncio
from src.core.config_log import logger


class ChatObserver:
    """
    Observer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
    """

    def __init__(self):
        # room_id -> list of callback functions
        self._subscribers: Dict[int, List[Callable]] = {}
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç)
        self._global_subscribers: List[Callable] = []

    def subscribe(self, room_id: int, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id not in self._subscribers:
            self._subscribers[room_id] = []

        if callback not in self._subscribers[room_id]:
            self._subscribers[room_id].append(callback)
            logger.debug(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É {room_id}. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self._subscribers[room_id])}")
        else:
            logger.debug(f"‚ö†Ô∏è Callback —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ–º–Ω–∞—Ç—É {room_id}")

    def subscribe_global(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç"""
        if callback not in self._global_subscribers:
            self._global_subscribers.append(callback)
            logger.debug(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self._global_subscribers)}")
        else:
            logger.debug("‚ö†Ô∏è Callback —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ")

    def unsubscribe(self, room_id: int, callback: Callable):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id in self._subscribers:
            if callback in self._subscribers[room_id]:
                self._subscribers[room_id].remove(callback)
                logger.debug(f"‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room_id}. –û—Å—Ç–∞–ª–æ—Å—å: {len(self._subscribers[room_id])}")

                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if not self._subscribers[room_id]:
                    del self._subscribers[room_id]
            else:
                logger.debug(f"‚ö†Ô∏è Callback –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∫–æ–º–Ω–∞—Ç—ã {room_id}")

    def unsubscribe_global(self, callback: Callable):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if callback in self._global_subscribers:
            self._global_subscribers.remove(callback)
            logger.debug(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞. –û—Å—Ç–∞–ª–æ—Å—å: {len(self._global_subscribers)}")
        else:
            logger.debug("‚ö†Ô∏è Callback –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö")

    async def notify(self, room_id: int, event_type: str, data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏"""
        total_subscribers = len(self._global_subscribers) + len(self._subscribers.get(room_id, []))

        logger.info(f"üîî Observer: {event_type} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}")

        tasks = []
        errors = []

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for callback in self._global_subscribers:
            try:
                task = asyncio.create_task(callback(event_type, data))
                tasks.append(task)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º callback –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")
                errors.append(e)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if room_id in self._subscribers:
            for callback in self._subscribers[room_id]:
                try:
                    task = asyncio.create_task(callback(event_type, data))
                    tasks.append(task)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")
                    errors.append(e)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            try:
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {i}: {result}")
                        errors.append(result)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                errors.append(e)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if errors:
            logger.warning(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å {len(errors)} –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(tasks)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        room_subscribers = {room_id: len(callbacks) for room_id, callbacks in self._subscribers.items()}

        return {
            "total_rooms": len(self._subscribers),
            "total_global_subscribers": len(self._global_subscribers),
            "room_subscribers": room_subscribers,
            "total_subscribers": len(self._global_subscribers) + sum(room_subscribers.values())
        }

    def clear_room_subscribers(self, room_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id in self._subscribers:
            count = len(self._subscribers[room_id])
            del self._subscribers[room_id]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã {room_id} ({count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")

    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        total_rooms = len(self._subscribers)
        total_global = len(self._global_subscribers)
        total_subscribers = sum(len(callbacks) for callbacks in self._subscribers.values()) + total_global

        self._subscribers.clear()
        self._global_subscribers.clear()

        logger.info(
            f"üßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {total_rooms} –∫–æ–º–Ω–∞—Ç, {total_global} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö, {total_subscribers} –≤—Å–µ–≥–æ")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Observer
chat_observer = ChatObserver()
