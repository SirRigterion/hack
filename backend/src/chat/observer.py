from typing import List, Callable, Dict, Any
import asyncio
from src.core.config_log import logger


class ChatObserver:
    """
    Observer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
    """

    def __init__(self):
        # room_id -> list of callback functions
        self._subscribers: Dict[int, List[Callable]] = {}
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç)
        self._global_subscribers: List[Callable] = []

    def subscribe(self, room_id: int, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id not in self._subscribers:
            self._subscribers[room_id] = []

        self._subscribers[room_id].append(callback)
        logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É {room_id}. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self._subscribers[room_id])}")

    def subscribe_global(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç"""
        self._global_subscribers.append(callback)
        logger.debug(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self._global_subscribers)}")

    def unsubscribe(self, room_id: int, callback: Callable):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id in self._subscribers:
            if callback in self._subscribers[room_id]:
                self._subscribers[room_id].remove(callback)
                logger.debug(f"–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room_id}. –û—Å—Ç–∞–ª–æ—Å—å: {len(self._subscribers[room_id])}")

    async def notify(self, room_id: int, event_type: str, data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏"""
        logger.info(f"üîî Observer: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {event_type} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")

        tasks = []

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for callback in self._global_subscribers:
            try:
                task = asyncio.create_task(callback(event_type, data))
                tasks.append(task)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º callback –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if room_id in self._subscribers:
            for callback in self._subscribers[room_id]:
                try:
                    task = asyncio.create_task(callback(event_type, data))
                    tasks.append(task)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            for result in results:
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è: {result}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Observer
chat_observer = ChatObserver()
