from src.chat.observer import chat_observer
from src.websocket.manager import manager
from src.core.config_log import logger


class WebSocketSubscriber:
    """
    –ü–æ–¥–ø–∏—Å—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ WebSocket
    """

    def __init__(self):
        self.is_registered = False

    async def handle_chat_event(self, event_type: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞"""
        try:
            room_id = data.get('room_id')
            if not room_id:
                return

            logger.info(f"üîî WebSocketSubscriber: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")

            if event_type == "new_message":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
                await manager.broadcast_to_room(
                    {
                        "type": "update_chat",  # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        "event": "new_message",
                        "data": data,
                        "timestamp": data.get('created_at'),
                        "message": "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"
                    },
                    str(room_id)
                )
                logger.info(f"üì¢ WebSocket: —Å–æ–æ–±—â–µ–Ω–∏–µ {data.get('message_id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")

            elif event_type == "message_updated":
                await manager.broadcast_to_room(
                    {
                        "type": "update_chat",
                        "event": "message_updated",
                        "data": data,
                        "timestamp": data.get('updated_at')
                    },
                    str(room_id)
                )

            elif event_type == "message_deleted":
                await manager.broadcast_to_room(
                    {
                        "type": "update_chat",
                        "event": "message_deleted",
                        "data": data,
                        "timestamp": data.get('deleted_at')
                    },
                    str(room_id)
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocketSubscriber: {e}")

    def register(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç"""
        if not self.is_registered:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            # –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å room_id
            self.is_registered = True
            logger.info("‚úÖ WebSocketSubscriber –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
websocket_subscriber = WebSocketSubscriber()
