from src.chat.observer import chat_observer
from src.websocket.manager import manager
from src.core.config_log import logger


class WebSocketSubscriber:
    """
    –ü–æ–¥–ø–∏—Å—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ WebSocket
    """

    def __init__(self):
        self.is_registered = False

    async def handle_chat_event(self, event_type: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞"""
        try:
            room_id = data.get('room_id')
            if not room_id:
                return

            logger.info(f"üîî WebSocketSubscriber: —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")

            if event_type == "new_message":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
                await manager.broadcast_to_room(
                    {
                        "type": "chat_message",  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                        "data": data,
                        "timestamp": data.get('created_at'),
                        "sync_required": True  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    },
                    str(room_id)
                )
                logger.info(f"üì¢ WebSocket: —Å–æ–æ–±—â–µ–Ω–∏–µ {data.get('message_id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")

            elif event_type == "message_updated":
                await manager.broadcast_to_room(
                    {
                        "type": "message_updated",
                        "data": data,
                        "timestamp": data.get('updated_at')
                    },
                    str(room_id)
                )

            elif event_type == "message_deleted":
                await manager.broadcast_to_room(
                    {
                        "type": "message_deleted",
                        "data": data,
                        "timestamp": data.get('deleted_at')
                    },
                    str(room_id)
                )

            elif event_type == "sync_required":
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await manager.broadcast_to_room(
                    {
                        "type": "force_sync",
                        "room_id": room_id,
                        "reason": data.get('action', 'state_updated'),
                        "timestamp": manager._get_timestamp()
                    },
                    str(room_id)
                )
                logger.info(f"üîÑ WebSocket: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")

            # –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if event_type in ["new_message", "message_updated", "message_deleted", "sync_required"]:
                await self._sync_room_state(str(room_id))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocketSubscriber: {e}")

    async def _sync_room_state(self, room_id: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            participants = manager.get_room_participants(room_id)

            await manager.broadcast_to_room(
                {
                    "type": "room_state_update",
                    "room_id": room_id,
                    "participants": participants,
                    "participants_count": len(participants),
                    "timestamp": manager._get_timestamp()
                },
                room_id
            )
            logger.debug(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã {room_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")

    def register(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç"""
        if not self.is_registered:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            chat_observer.subscribe("global", self.handle_chat_event)
            self.is_registered = True
            logger.info("‚úÖ WebSocketSubscriber –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç")

    def unregister(self):
        """–û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if self.is_registered:
            chat_observer.unsubscribe("global", self.handle_chat_event)
            self.is_registered = False
            logger.info("‚úÖ WebSocketSubscriber –æ—Ç–ø–∏—Å–∞–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
websocket_subscriber = WebSocketSubscriber()
